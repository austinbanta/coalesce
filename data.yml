defaultStorageMapping: STG
installedPackages: {}
jobs:
  Job-16:
    excludeSelector: ""
    id: 16
    includeSelector: |
      { location: DEV name: PARTSUPP }+
    name: New Job
    steps: []
    subgraphs: []
  Job-17:
    excludeSelector: ""
    id: 17
    includeSelector: "+{ location: STG name: FCT_LINEITEM_ORDERS }"
    name: fact table refresh
    steps: []
    subgraphs: []
locations:
  COVID:
    mappingDefinitions:
      "3":
        database: COVID19
        schema: PUBLIC
  DEV:
    mappingDefinitions:
      "3":
        database: COALESCE_SAMPLE_DATABASE
        schema: TPCH_SF001
  STG:
    mappingDefinitions:
      "3":
        database: AUSTIN_TEST_DB_PROD
        schema: EDW_PROD
  TASTY_CUST:
    mappingDefinitions:
      "3":
        database: ""
        schema: ""
  TASTY_POS:
    mappingDefinitions:
      "3":
        database: ""
        schema: ""
  UNS:
    mappingDefinitions:
      "3":
        database: COALESCE_SAMPLE_DATABASE
        schema: WEATHER
macros:
  Macro-1:
    id: "1"
    macroString: |-
      {%- macro testunique(column) -%}
      SELECT
            {{column}},
            COUNT(*)
          FROM
            {{this}}
          GROUP BY
            {{column}}
          HAVING
            COUNT(*) > 1
      {%- endmacro %}

      {%- macro testbalance(column,balance_value) -%}
      SELECT
            {{column}},
            "C_NAME"
          FROM
            {{this}}
          WHERE
            {{column}} > {{balance_value}}
      {%- endmacro %}


      {%- macro testerror(column) -%}
      SELECT
            {{column}},
            COUNT(*)
          FROM
            asdfasdf
          GROUP BY
            {{column}}
          HAVING
            COUNT(*) > 1
      {%- endmacro %}
packages: {}
projects: {}
stepTypes:
  StepType-22:
    id: "22"
    isDisabled: true
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub User-Defined
        short: 'H'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - type: multisourceToggle
          
        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}

            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            			{% endif %}
        run:
          templateString: |-
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT DISTINCT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.isHubHash) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            	
            {% endif %}
    name: Hub
    version: 1
  StepType-23:
    id: "23"
    isDisabled: true
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Link User-Defined
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Insert Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: false

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                            {{ stage('Create Link Table') }}

                            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                            (
                                {% for col in columns %}
                                    "{{ col.name }}" {{ col.dataType }}
                                    {%- if not col.nullable %} NOT NULL
                                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                            )
                            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

                        {% endif %}
        run:
          templateString: |

            {% if node.materializationType == 'table' %}
                {% if config.preSQL %}
                    {{ stage('Pre-SQL') }}
                    {{ config.preSQL }}
                
                {% endif %}

                        
                {{ stage('Merge Link') }}
                MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
                (
                    {% for source in sources %}
                    SELECT DISTINCT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {{ config.insertStrategy }}
                    {% endif %}
                {% endfor %}
                )
                AS "SRC"
                ON
                {% for col in sources[0].columns if (col.isLinkHash) -%}
                    {% if not loop.first %}
                        AND
                    {% endif %}
                    "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                {% endfor %}
                WHEN NOT MATCHED THEN
                INSERT
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                ) VALUES
                (
                    {% for col in columns %}
                        "SRC"."{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )

                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}    
                {% endif %}
            {% endif %}
                        
    name: Link
    version: 1
  StepType-24:
    id: "24"
    isDisabled: true
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite User-Defined
        short: 'S'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

         

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}

            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            			{% endif %}
        run:
          templateString: |-
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

            	{{ stage('Insert New Rows') }}
            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	WITH "SAT_CURR_ROWS" AS (
            		/* get current rows from satellite */
            		{% for col in columns if col.isHubHash or col.isChangeHash %}
            			{%- if loop.first -%}SELECT {% endif %} 
            			{{col.name}}
            			{%- if not loop.last -%}, {% endif %}
            			{%- if loop.last %} 
            				FROM {{ ref_no_link(node.location.name, node.name) }} 
            				QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isHubHash") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
            			{% endif %}
            		{% endfor %}
            	)

            		{% for source in sources %}
            			SELECT DISTINCT
            			{% for col in source.columns %}
            				{{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}

            			{{ source.join }}
            		WHERE NOT EXISTS(
            			SELECT 1 FROM "SAT_CURR_ROWS"
            			WHERE 
            			{% for col in source.columns if col.isHubHash or col.isChangeHash %}
            				{% if not loop.first %}
            					AND
            				{% endif %}
            				{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            			{% endfor %}
            		)

            		{% endfor %}

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            {% endif %}
    name: Satellite
    version: 1
  StepType-25:
    id: "25"
    isDisabled: true
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Link Satellite User-Defined
        short: 'LSAT'
        plural: 'Link Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: false

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: false

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                            {{ stage('Create Link Satellite Table') }}

                            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                            (
                                {% for col in columns %}
                                    "{{ col.name }}" {{ col.dataType }}
                                    {%- if not col.nullable %} NOT NULL
                                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                            )
                            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

                        {% endif %}
        run:
          templateString: |

            {% if node.materializationType == 'table' %}
                {% if config.preSQL %}
                    {{ stage('Pre-SQL') }}
                    {{ config.preSQL }}
                {% endif %}

                {{ stage('Insert New Rows') }}
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                WITH "SAT_CURR_ROWS" AS (
                    /* get current rows from satellite */
                    {% for col in columns if col.isLinkHash or col.isChangeHash %}
                        {%- if loop.first -%}SELECT {% endif %} 
                        {{col.name}}
                        {%- if not loop.last -%}, {% endif %}
                        {%- if loop.last %} 
                            FROM {{ ref_no_link(node.location.name, node.name) }} 
                            QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isLinkHash") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
                        {% endif %}
                    {% endfor %}
                )

                    {% for source in sources %}
                        SELECT DISTINCT
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}
                    WHERE NOT EXISTS(
                        SELECT 1 FROM "SAT_CURR_ROWS"
                        WHERE 
                        {% for col in source.columns if col.isLinkHash or col.isChangeHash %}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
                        {% endfor %}
                    )

                    {% endfor %}

                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}
                {% endif %}

            {% endif %}

                        
    name: Link Satellite
    version: 1
  StepType-26:
    id: "26"
    isDisabled: true
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Effectivity Satellite User-Defined
        short: 'EFF_SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: false

          - displayName: Driving Key Column
            type: columnSelector
            attributeName: isDrivingKey
            isRequired: false


        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                            {{ stage('Create Effectivity Satellite Table') }}

                            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                            (
                                {% for col in columns %}
                                    "{{ col.name }}" {{ col.dataType }}
                                    {%- if not col.nullable %} NOT NULL
                                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                            )
                            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

                        {% endif %}
        run:
          templateString: |

            {% if node.materializationType == 'table' %}
                {% if config.preSQL %}
                    {{ stage('Pre-SQL') }}
                    {{ config.preSQL }}
                {% endif %}

                {{ stage('Insert New Rows') }}
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                WITH "SAT_CURR_ROWS" AS (
                    /* get current rows from satellite */
                    {% for col in columns if col.isDrivingKey or col.isLinkHash %}
                        {%- if loop.first -%}SELECT {% endif %} 
                        {{col.name}}
                        {%- if not loop.last -%}, {% endif %}
                        {%- if loop.last %} 
                            FROM {{ ref_no_link(node.location.name, node.name) }} 
                            QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isDrivingKey") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
                        {% endif %}
                    {% endfor %}
                )

                    {% for source in sources %}
                        SELECT DISTINCT
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}
                    WHERE NOT EXISTS(
                        SELECT 1 FROM "SAT_CURR_ROWS"
                        WHERE 
                        {% for col in source.columns if col.isDrivingKey or col.isLinkHash %}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
                        {% endfor %}
                    )

                    {% endfor %}

                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}
                {% endif %}

            {% endif %}

                        
    name: Effectivity Satellite
    version: 1
  StepType-27:
    id: "27"
    isDisabled: true
    metadata:
      error: null
      nodeMetadataSpec: |+
        capitalized: Satellite Milti-Active User-Defined
        short: 'HS_MA'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: false

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: false

          - displayName: Multi-Active Column
            type: columnSelector
            attributeName: isMAAttrib
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                            {{ stage('Create Satellite Table') }}

                            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                            (
                                {% for col in columns %}
                                    "{{ col.name }}" {{ col.dataType }}
                                    {%- if not col.nullable %} NOT NULL
                                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                            )
                            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

                        {% endif %}
        run:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

            	{{ stage('Insert New Rows') }}
            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	WITH "SAT_CURR_ROWS" AS (
            		/* get current rows from satellite */
            		{% for col in columns if col.isHubHash or col.isChangeHash or col.isMAAttrib %}
            			{%- if loop.first -%}SELECT {% endif %} 
            			{{col.name}}
            			{%- if not loop.last -%}, {% endif %}
            			{%- if loop.last %} 
            				FROM {{ ref_no_link(node.location.name, node.name) }} 
            				QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isHubHash") }}","{{ get_value_by_column_attribute("isMAAttrib") }}" ORDER BY LOAD_DATE DESC) = 1
            			{% endif %}
            		{% endfor %}
            	)

            		{% for source in sources %}
            			SELECT DISTINCT
            			{% for col in source.columns %}
            				{{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}

            			{{ source.join }}
            		WHERE NOT EXISTS(
            			SELECT 1 FROM "SAT_CURR_ROWS"
            			WHERE 
            			{% for col in source.columns if col.isHubHash or col.isChangeHash or col.isMAAttrib %}
            				{% if not loop.first %}
            					AND
            				{% endif %}
            				{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            			{% endfor %}
            		)

            		{% endfor %}

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            {% endif %}

                        
    name: Satellite Multi-Active
    version: 1
  StepType-28:
    id: "28"
    isDisabled: true
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: BV View
        short: S_CURR
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
        - groupName: Options
          items:
          - displayName: Sat Hash Column(s) (Include Multi-Active)
            type: columnSelector
            attributeName: isSatKey
            isRequired: true

          - displayName: Sat Date Column(s)
            type: columnSelector
            attributeName: isDateColumn
            isRequired: true

          - type: materializationSelector
            options:
              - view
            default: view
            isRequired: true
            enableIf: 'false'
      templates:
        create:
          templateString: |-
            {{ stage('Create View') }}

            {% set order_by = namespace(order_by_txt='') %}
            {% set partition_by = namespace(partition_by_txt='') %}


                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        
                                {%- if col.isDateColumn  %} 
                            {%- if order_by.order_by_text  | length >= 1 %}{% set order_by.order_by_text = order_by.order_by_text + ',' + col.name %}{% endif %} 
                            {%- if order_by.order_by_text  | length == 0 %}{% set order_by.order_by_text = col.name %}{% endif %}
                    {% endif %} 

                    {%- if col.isSatKey  %} 
                            {%- if partition_by.partition_by_text  | length >= 1 %}{% set partition_by.partition_by_text = partition_by.partition_by_text + ',' + col.name %}{% endif %} 
                            {%- if partition_by.partition_by_text  | length == 0 %}{% set partition_by.partition_by_text = col.name %}{% endif %}
                    {% endif %}  


                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                   
                    {{ source.join }}
                    QUALIFY LEAD({{order_by.order_by_text}}) 
                            OVER (PARTITION BY {{partition_by.partition_by_text}} 
                                ORDER BY {{order_by.order_by_text}} ASC) IS NULL

             
                {% endfor %}
        run:
          templateString: ""
    name: Sat Business Vault Current
    version: 1
  StepType-29:
    id: "29"
    isDisabled: true
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: BV View
        short: S_PIT
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
        - groupName: Options
          items:
          - displayName: Sat Hash Column(s) (Include Multi-Active)
            type: columnSelector
            attributeName: isSatKey
            isRequired: true

          - displayName: Sat Date Column(s)
            type: columnSelector
            attributeName: isDateColumn
            isRequired: true

          - type: materializationSelector
            options:
              - view
            default: view
            isRequired: true
            enableIf: 'false'
      templates:
        create:
          templateString: |
            {{ stage('Create View') }}

            {% set order_by = namespace(order_by_txt='') %}
            {% set partition_by = namespace(partition_by_txt='') %}


                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        ,
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        
                    {%- if col.isDateColumn  %} 
                            {%- if order_by.order_by_text  | length >= 1 %}{% set order_by.order_by_text = order_by.order_by_text + ',' + col.name %}{% endif %} 
                            {%- if order_by.order_by_text  | length == 0 %}{% set order_by.order_by_text = col.name %}{% endif %}
                    {% endif %} 

                    {%- if col.isSatKey  %} 
                            {%- if partition_by.partition_by_text  | length >= 1 %}{% set partition_by.partition_by_text = partition_by.partition_by_text + ',' + col.name %}{% endif %} 
                            {%- if partition_by.partition_by_text  | length == 0 %}{% set partition_by.partition_by_text = col.name %}{% endif %}
                    {% endif %}  


                    {% endfor %}
                    "SAT_EFFECTIVE_DATE"
                    ,"SAT_EXPIRY_DATE"
                    ,"CURRENT_FLAG"
                    ,"VERSION_NUMBER"
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        ,
                    {% endfor %}

                    {# Sat Effective Date #}
                        "LOAD_DATE" AS "SAT_EFFECTIVE_DATE",
                    
                    {# Sat Expiry Date #}
                        NVL(
                            LEAD({{order_by.order_by_text}}) 
                            OVER (PARTITION BY {{partition_by.partition_by_text}} 
                                ORDER BY {{order_by.order_by_text}} ASC), 
                        '31-Dec-8888') AS "SAT_EXPIRY_DATE"
            ,            
                    {# Current Flag #}
                        CASE WHEN LEAD({{order_by.order_by_text}}) 
                            OVER (PARTITION BY {{partition_by.partition_by_text}} 
                                ORDER BY {{order_by.order_by_text}} ASC) IS NULL
                                THEN 'Y'
                                ELSE 'N'
                                END        
                        AS "CURRENT_FLAG",  

                    {# Version Number #}              
                        ROW_NUMBER () 
                        OVER (PARTITION BY {{partition_by.partition_by_text}} 
                        ORDER BY {{order_by.order_by_text}} ASC) AS "VERSION_NUMBER"


                    {{ source.join }}

             
                {% endfor %}
        run:
          templateString: ""
    name: Sat Business Vault PIT
    version: 1
  StepType-30:
    id: "30"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Snowflake Cortex ML Forecast 2
        short: SF_ML_FCSTS
        tagColor: "#2ab3e7"
        plural: Snowflake ML Forecasts

        config:

        - groupName: Forecast Model Input
          items:

            - type: toggleButton
              displayName: 'Multi-Series Forecast'
              attributeName: 'multiseries'
              isRequired: false
              default: 'true'

            - type: columnDropdownSelector
              displayName: 'Series Column'
              attributeName: 'seriescol'
              isRequired: false
              enableIf: "{{ config.multiseries }}"

            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: true

            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: true

            - type: toggleButton
              displayName: 'Exogenous Variables'
              attributeName: 'exvar'
              isRequired: false
              default: 'true'
          
            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              enableIf: '{%- if not config.exvar %}true{%- else %}false{%- endif %}' 
              isRequired: false
              default: '30'

        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {{ stage('Create Forecast Table') }}


            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in source.columns  %}
                    "{{ col.name }}" 
                    {%- if col.name == config.tscol.name %} TIMESTAMP 
                    {%- elif col.name == config.tgtcol.name %} FLOAT 
                    {%- else %} {{ col.dataType }}
                    {%- endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{%- endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


        run:
          templateString: |+
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'FORECAST_' ~ src_node.name %}

            {{ stage('Truncate Forecast table') }}
            TRUNCATE IF EXISTS {{ this }}

            {{ stage('Populate Forecast Table') }}

            INSERT INTO {{ this }}
            (
                {%- for col in source.columns  %} 
                    "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
            )
            SELECT 
                {% for col in source.columns  %} 
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            {{ source.join }}

            {{ stage('Create Forecast Model Instance') }}

            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NOT NULL
                '),
                {% if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )


            {{ stage('Insert ' + source.name | string ) }}
            BEGIN

            {% if config.exvar %}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST(
                    INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT 
                    {%- for col in columns if not (col.forecast or col.upper_bound or col.lower_bound) %}
                        "{{col.name}}"{%- if not loop.last %}, {%- endif %}
                    {%- endfor %}            
                    FROM {{ this }}
                    WHERE  "{{ config.tgtcol.name }}" IS NULL
                '),
                {%if config.multiseries %}SERIES_COLNAME => '{{ config.seriescol.name }}', {% endif %}
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}' );

                UPDATE {{ this }} SRC
                SET 
                    {%- for col in columns if  col.forecast or col.lower_bound or col.upper_bound %}
                        "{{ col.name }}" = RES."{{ col.name }}" {%- if not loop.last %}, {%- endif %}
                    {%- endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES
                WHERE 
                    RES."TS" = SRC."{{ config.tscol.name }}"
                    {%- if config.multiseries  %}
                    AND RES."SERIES" = SRC."{{ config.seriescol.name }}"            
                    {%- endif %};

            {% else %}

                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }});

                INSERT INTO {{ this }}
                (
                    {%- for col in source.columns  %} 
                        "{{ col.name }}" {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                SELECT 
                    {% for col in source.columns %}
                        {%- if config.multiseries and col.id == config.seriescol.id %}"SERIES"
            	        {%- elif col.id == config.tscol.id %}"TS"
            	        {%- elif col.id == config.tgtcol.id %}NULL
            	        {%- elif col.forecast or col.lower_bound or col.upper_bound %}"{{ col.name }}"
            	        {%- else %}{{ get_source_transform(col) }} AS "{{ col.name }}"
            	        {%- endif %}{%- if not loop.last %}, {%- endif %}
                    {% endfor %}
                FROM TABLE(RESULT_SCAN(-1)) RES;
            {% endif %}


            END


    name: Snowflake Cortex ML Forecast 2
    version: 1
  StepType-33:
    id: "33"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: External Table
        short: 'EXT'
        tagColor: '#C39BD3'
        isDisabled: false
        plural: External Tables

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: ""
            options:
            - "List your Stages here"
            - "Create them in Snowflake"
            isRequired: true

          - displayName: File Pattern
            attributeName: filePattern
            type: textBox
            default: ".*[.]json"
            isRequired: true

        - groupName: File Format 
          items:
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: JSON
            options:
            - "CSV"
            - "JSON"
            - "Parquet"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{{ config.fileType in ['CSV','JSON'] }}" 
            type: dropdownSelector
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Additional Options
          items:
          - displayName: Auto Refresh
            attributeName: autoRefresh
            type: toggleButton
            default: false
            isRequired: false

          - displayName: AWS SNS Topic
            attributeName: snsTopic
            type: textBox
            enableIf: "{{ config.autoRefresh }}"
            default: "arn:aws:sns:your-region:123456789012:your-notification"
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: view
            options:
            - view
            isRequired: false

        systemColumns:

        - displayName: 'VALUE'
          attributeName: 'VALUE'
          transform: ''
          dataType: VARIANT
          placement: beginning
          
        - displayName: 'METADATA$FILENAME'
          attributeName: 'METADATA$FILENAME'
          transform: ''
          dataType: STRING
          placement: end
      templates:
        create:
          templateString: |-
            {{ stage('Create External Table') }}

            CREATE OR REPLACE EXTERNAL TABLE {{ ref_no_link(node.location.name, node.name) }}
              {% if config.fileType == "CSV" %}
                {% for col in sources[0].columns if (col.name | upper != "VALUE" and col.name | upper != "METADATA$FILENAME") %}
                  {% if loop.first %}({% endif %}
                    "{{ col.name }}" {{ col.dataType }} AS (value:c{{ loop.index }}::{{ col.dataType }})
                  {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                  {%- if not loop.last -%}, {% else %}){% endif %}
                {% endfor %}
              {% endif %}
              
              with location = @{{ ref_no_link(node.location.name, config.fileLocation) }}
              pattern='{{ config.filePattern }}'
              file_format = (type = {{ config.fileType }}
              {% if config.fileType == "CSV" %}
                {% if config.recDelim != '' %}record_delimiter = '{{ config.recDelim }}'{% endif %}
                {% if config.fieldDelim != '' %}field_delimiter = '{{ config.fieldDelim }}'{% endif %}
                {% if config.fieldEnclosed != '' %}field_optionally_enclosed_by = '{{ config.fieldEnclosed }}'{% endif %}
                {% if config.skipHeader != '' %}skip_header = {{ config.skipHeader }}{% endif %}
                {% if config.skipBlankLines %}skip_blank_lines = {{ config.skipBlankLines }}{% endif %}
                {% if config.trimSpace %}trim_space = {{ config.trimSpace }}{% endif %}
              {% endif %}
              )
              auto_refresh = {{ config.autoRefresh }}
              {% if config.autoRefresh and config.snsTopic != '' %}aws_sns_topic = '{{ config.snsTopic }}'{% endif %}
              {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            ;
        run:
          templateString: ""
    name: External Table
    version: 1
  StepType-34:
    id: "34"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: UNLOAD
        short: 'EXPORT'
        tagColor: 'dodgerblue'
        isDisabled: false
        plural: Unloads

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: Export
            options:
            - "Export"
            isRequired: true

        - groupName: File Format 
          items:
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "JSON"
            - "Parquet"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{{ config.fileType in ['CSV','JSON'] }}" 
            type: dropdownSelector
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Additional Options
          items:
          - displayName: Overwrite existing files
            attributeName: overwrite
            type: toggleButton
            default: true
            isRequired: false
          - displayName: Single file
            attributeName: singleFile
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false
      templates:
        create:
          templateString: |-
            {{ stage('Nothing to create') }}
            SELECT 1
        run:
          templateString: |-
            {% for source in sources %}
                {% for dep in source.dependencies if dep.node %}
                    {{ stage('Unloading ' + dep.node.name | string ) }}
                    COPY INTO @{{ ref_no_link(node.location.name, config.fileLocation) | trim | upper ~ "/" ~ node.name }}{% if config.singleFile %}.{{ config.fileType | lower }}{% endif %}
                    FROM {{ ref_no_link(dep.node.location.name, dep.node.name) | upper }}
                    overwrite = {{ config.overwrite }}
                    single = {{ config.singleFile }}
                    file_format = (type = {{ config.fileType }}
                    {% if config.fileType == "CSV" %}
                        {% if config.recDelim != null %}record_delimiter = '{{ config.recDelim }}'{% endif %}
                        {% if config.fieldDelim != null %}field_delimiter = '{{ config.fieldDelim }}'{% endif %}
                        {% if config.fieldEnclosed != null %}field_optionally_enclosed_by = '{{ config.fieldEnclosed }}'{% endif %}
                        {% if config.skipHeader != null %}skip_header = {{ config.skipHeader }}{% endif %}
                        {% if config.skipBlankLines %}skip_blank_lines = {{ config.skipBlankLines }}{% endif %}
                        {% if config.trimSpace %}trim_space = {{ config.trimSpace }}{% endif %}
                    {% endif %}
                    )
                {% endfor %}
            {% endfor %}
    name: Unload
    version: 1
  StepType-39:
    id: "39"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: SQL
        short: SQL
        plural: SQLs
        tagColor: black

        config:
        - groupName: SQL Script
          items:
          - displayName: SQL
            attributeName: SQL1
            type: textBox
            syntax: sql
            isRequired: true

        systemColumns:
        - displayName: SQL_SEQ
          transform: ''
          dataType: NUMBER IDENTITY
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_START_DATE
          transform: ''
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate
      templates:
        create:
          templateString: |
            {{ stage('Create SQL Audit') }}

              CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            	
        run:
          templateString: |-
            {{ stage('SQL AUDIT') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }} (SYSTEM_START_DATE) SELECT CURRENT_TIMESTAMP

            {% if config.SQL1 %}
            	{{ stage('SQL1') }}
            	{{ config.SQL1 }}
            {% endif %}
    name: SQL
    version: 1
  StepType-44:
    id: "44"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: PII View
        short: VPII
        tagColor: 'red'
        isDisabled: true
        plural: Views

        config:
          - groupName: Documentation
            items:
            - displayName: Description
              attributename: description
              type: textBox
              isRequired: false
              default: "A PII View adds a masking policy to specific attributes marked using the PII Flag column.  Allowed values (PII or blank)."

          - groupName: Options
            items: 

            - displayName: Masking policy name
              attributeName: maskingPolicy
              type: textBox
              isRequired: true

          - groupName: Hidden config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: view
              options:
              - view
              isRequired: true

        mappingColumns:                                  
        - type: textBox                                  
          headerName: 'PII Flag'                        
          attributeName: piiFlag
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {{ stage('Create View') }}
            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}"{%- if col.piiFlag | upper == "PII"%} MASKING POLICY "{{config.maskingPolicy}}" {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            AS

            SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {% for col in source.columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}

            {{ source.join }}


        run:
          templateString: ""
    name: PII View
    version: 1
  StepType-60:
    id: "60"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Stream and Insert or Merge
        short: SIM
        tagColor: black
        plural: Streams and Merges

        deployStrategy: advanced

        config:
        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: true

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Insert Only
            attributeName: insertOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'External Table' %} true {% else %} false {% endif %}"

        - groupName: Target Loading Options
          items:
          - displayName: Load Type
            attributeName: loadType
            type: dropdownSelector
            default: Insert
            options:
              - Insert
              - Merge
            isRequired: true

          - type: tabular
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: false
                
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Record Date / Timestamp'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: false
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: false
            
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"

        - groupName: Sceduling Options
          items:
          - displayName: Sceduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |-
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

            {# Source Object Location and Name #}
            {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
            {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
            {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
            {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
            {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}

            {# Target Stream Location and Name #}
            {% set streamTargetLocationName = desiredState.node.location.name %}
            {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
            {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
            {% set streamName = desiredState.node.name + '_STREAM' %}
            {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

            {# Target Table Info #}
            {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
            {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}
            {% set targetTableName = desiredState.node.name %}

            {# Stream Type #}
            {% if desiredState.config.sourceType == 'Table' %} 
                {% set streamType = 'TABLE' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% elif desiredState.config.sourceType == 'External Table' %} 
                {% set streamType = 'EXTERNAL TABLE' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% elif desiredState.config.sourceType == 'Directory Table' %} 
                {% set streamType = 'STAGE' %}
                {% set streamSourceObjectName = desiredState.config.stageName %}
            {% else %} 
                {% set streamType = 'VIEW' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% endif %}

            {# Stream Append Behavior #}
            {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                {% if desiredState.config.appendOnly == true %} 
                    {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                {% else %} 
                    {% set streamAppendMode = 'APPEND_ONLY = FALSE' %}
                {% endif %}
            {% else %}
                {% set streamAppendMode = '' %}
            {% endif %}

            {# Stream Initial Row Behavior #}
            {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                {% if desiredState.config.initialRows == true %} 
                    {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                {% else %} 
                    {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                {% endif %}
            {% else %}
                {% set streamInitialRowsMode = '' %}
            {% endif %}

            {# Stream Insert Only Behavior #}
            {% if streamType == 'EXTERNAL TABLE' %} 
                {% if desiredState.config.insertOnly == true %} 
                    {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                {% else %} 
                    {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                {% endif %}
            {% else %}
                {% set streamInsertOnlyMode = '' %}
            {% endif %}

            {# Task Info #}
            {% set taskName = desiredState.node.name + '_TASK'  %}
            {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

            {% set tableColumnIds = desiredState.columns | map(attribute='id') | list %}
            {% set tableColumnNames = desiredState.columns | map(attribute='name') | list %}

            {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                {{ stage('Suspend Root Task') }}
                ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
            {%- endif -%}

            {{ stage('Create Stream') }}
            CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                ON {{ streamType }} {{ streamSourceObjectName }}
                {{ streamAppendMode }}
                {{ streamInitialRowsMode }}
                {{ streamInsertOnlyMode }}
                
            {{ stage('Create Target Table') }}
            CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                (
                {%- for col in desiredState.columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                )

            {{ stage('Create Task') }}
                {# Set Namespace Variables #}
                {% set nsVariables = namespace(taskWhenRun="") %}
                {% set nsVariables = namespace(partition="") %}
                {% set nsVariables = namespace(orderBy="") %}
                {% set nsVariables = namespace(rowNumber="") %}
                {% set nsVariables = namespace(tableKey=[]) %}

                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}

                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
                {%- else -%}
                    {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                    {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                    {%- for p in predecessorTasks -%}
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                        {%- if not loop.last -%} 
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                        {%- endif %}
                    {% endfor %}    
                {%- endif -%}

                {# When Stream has data logic #}
                {%- if desiredState.config.flagSrcStream == true -%} 
                    {%- set streamPoll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fullyQualifiedStreamName + "')" -%} 
                {%- endif -%}
                
                {# Merge partition by and order by #}
                {%- if desiredState.config.loadType == 'Merge' -%} 
                    {% set tableColumnNamesUpdate = tableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
                    
                    {% for i in desiredState.config.partitionBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                        {% else %}
                            {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                        {%- endif -%}

                        {% set tableColumnNamesUpdate = tableColumnNames | reject('in', i.partColName.name) | list %}

                    {% endfor %}

                    {% for i in desiredState.config.orderBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.orderBy = '"' + i.colName.name + '" ' + i.sortOrd %}
                        {% else %}
                            {% set nsVariables.orderBy = nsVariables.orderBy + ', "' + i.colName.name + '" ' + i.sortOrd %}
                        {%- endif -%}
                    {% endfor %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}

                    {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                    {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
                {%- endif -%}

                CREATE OR REPLACE TASK 
                    {{ fullyQualifiedTaskName }} 
                    {{ taskType}} 
                    {{ nsVariables.taskWhenRun }} 
                    {{ streamPoll }} 
                AS 
                {% if desiredState.config.loadType == 'Insert' -%} 
                INSERT INTO {{ fullyQualifiedTargetTableName }}
                SELECT {% for id in tableColumnIds %}
                        {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {% set columnTransformation = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if columnTransformation == "" -%}
                          "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                          {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedStreamName }}
                {% else -%}
                MERGE INTO {{ fullyQualifiedTargetTableName }} tgt USING
                -- Select Statement Preparing Data for Merge
                (SELECT {% for id in tableColumnIds %}
                        {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {% set columnTransformation = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if columnTransformation == "" -%}
                          "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                          {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                 FROM {{ fullyQualifiedStreamName }}
                 QUALIFY {{ nsVariables.rowNumber }} = 1) src
                 -- Join Condition
                 ON {% for col in nsVariables.tableKey -%}
                     src."{{ col }}" = tgt."{{ col }}"
                {% if not loop.last %} AND {% endif %}
                    {%- endfor -%}
                -- What to do if data is matched based on table key
                WHEN MATCHED THEN UPDATE SET 
                    {%- for col in tableColumnNamesUpdate %}
                            tgt."{{ col }}" = src."{{ col }}"
                            {%- if not loop.last -%}, {%- endif %}
                    {%- endfor %}
                -- What to do with new records based on table key
                WHEN NOT MATCHED THEN INSERT 
                    (
                    {%- for col in desiredState.columns -%}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {% endfor %}) 
                VALUES (
                    {%- for col in desiredState.columns -%}
                            src."{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {% endfor %})
                {%- endif -%}

            {{ stage('Resume Task') }}
            {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
            {%- endif -%}

            {% elif currentState != undefined and desiredState == undefined %}

            {# Source Stream Location and Name #}
            {% set streamTargetLocationName = currentState.node.location.name %}
            {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
            {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
            {% set streamName = currentState.node.name + '_STREAM' %} %}
            {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

            {# Target Table Info #}
            {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
            {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
            {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
            {% set targetTableName = currentState.node.name %}

            {# Task Info #}
            {% set taskName = currentState.node.name + '_TASK'  %}
            {%- set fullyQualifiedTaskName = streamTargetDatabaseName + '.' + streamTargetSchemaName + '."' + taskName + '"' -%} 


            {{ stage('Drop Stream') }}
            DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}

            {{ stage('Drop Table') }}
            DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}

            {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%} 
                {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + currentState.config.rootTask + '"' -%} 

            {{ stage('Suspend Root Task') }}
                ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
            {{ stage('Drop Current Task Task') }}
                DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
            {{ stage('Resume Root Task') }}
                select system$task_dependents_enable('{{ fullyQualifiedRootTaskName }}');
            {%- else -%}
            {{ stage('Drop Current Task') }}
                DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
            {%- endif -%}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Snowflake Stream IoM
    version: 1
  StepType-67:
    id: "67"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: SF CORTEX ML FORECAST
        short: CORTEX_ML_FORECAST
        tagColor: "#2ab3e7"
        plural: ML Forecasts

        config:
        - groupName: Entity Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true
          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            enableIf: "{{ node.materializationType == 'table' }}"

        - groupName: Forecast Model Input
          items:
            - type: columnDropdownSelector
              displayName: 'Timestamp Column'
              attributeName: 'tscol'
              isRequired: false
            - type: columnDropdownSelector
              displayName: 'Target Column'
              attributeName: 'tgtcol'
              isRequired: false
            - displayName: Days To Forecast
              attributeName: fcdays
              type: textBox
              isRequired: true
              default: '30'

        - groupName: Forecast Model Output
          items:
            - type: toggleButton
              displayName: 'Include Source Data'
              attributeName: 'addsourcedata'
              isRequired: false
              default: 'true'

        systemColumns:
        - displayName: "FORECAST"
          attributeName: forecast
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "LOWER_BOUND"
          attributeName: lower_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
        - displayName: "UPPER_BOUND"
          attributeName: upper_bound
          transform: ""
          dataType: FLOAT
          placement: end
          description: 'Generated by ML Forecast Model'
      templates:
        create:
          templateString: |-
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'forecast_' ~ src_node.name %}

            {{ stage('Create Forecast Model Instance') }}

            CREATE OR REPLACE SNOWFLAKE.ML.FORECAST
             {{ ref_no_link(node.location.name, forecast_name) }}(
                INPUT_DATA => SYSTEM$QUERY_REFERENCE('
                    SELECT
                    {% for col in source.columns if not col.forecast and not col.lower_bound and not col.upper_bound %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}
                '),
                TIMESTAMP_COLNAME => '{{ config.tscol.name }}',
                TARGET_COLNAME => '{{ config.tgtcol.name }}'
            )

            {% if node.materializationType == 'table' %}
                {{ stage('Create Forecast Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}

                {{ stage('Refresh Forecast') }}
                CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }})

                {{ stage('Create Forecast View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                SELECT
                {% for col in source.columns %}       
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}

                {{ source.join }}

                {% if config.unionforecast %}
                UNION ALL
                SELECT
                {% for col in source.columns %}
                    {% if col.id == config.tscol.id %}
                        "TS"
                    {% elif col.id == config.tgtcol.id %}
                        NULL
                    {% elif col.forecast or col.lower_bound or col.upper_bound %}
                        "{{ col.name }}"
                    {% else %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                FROM TABLE(RESULT_SCAN(-1))
                {% endif %}

            {% endif %}
        run:
          templateString: |-
            {% set source = sources[0] %}
            {% set src_node = source.dependencies[0].node %}
            {% set forecast_name = 'forecast_' ~ src_node.name %}

            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
                {% if config.preSQL %}
                    {{ stage('Pre-SQL') }}
                    {{ config.preSQL }}
                {% endif %}
                
                
                
                    {% if config.truncateBefore %}
                
                        {{ stage('Truncate Stage Table') }}
                        TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
                
                    {% endif %}
                
                
                    {{ stage('Insert ' + source.name | string ) }}

                    BEGIN
                    CALL {{ ref_no_link(node.location.name, forecast_name) }}!FORECAST({{ config.fcdays }});

                    INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in source.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {% if config.addsourcedata %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    UNION ALL
                    {% endif %}

                    SELECT
                    {% for col in source.columns %}
                        {% if col.id == config.tscol.id %}
                            "TS"
                        {% elif col.id == config.tgtcol.id %}
                            NULL
                        {% elif col.forecast or col.lower_bound or col.upper_bound %}
                            "{{ col.name }}"
                        {% else %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    FROM TABLE(RESULT_SCAN(-1));
                    END

                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}
                {% endif %}
            {% endif %}

            {% if config.testsEnabled %}
                {% for test in node.tests %}
                    {% if test.runOrder == 'After' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% for column in columns %}
                    {% for test in column.tests %}
                        {{ test_stage(column.name + ": " + test.name) }}
                        {{ test.templateString }}
                    {% endfor %}
                {% endfor %}
            {% endif %}
    name: "Snowflake: Cortex ML Forecast"
    version: 1
  StepType-68:
    id: "68"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Dyanmic Table Dimension
        short: DT_DIM
        tagColor: "#F6FF3C"
        isDisabled: true
        plural: Dynamic Tables

        deployStrategy: advanced

        config:
          - groupName: Dynamic Table Options
            items: 
            - displayName: Warehouse on which to execute Dynamic Table
              attributeName: warehouseName
              type: textBox
              default: dev_wh_xs
              isRequired: true

            - type: toggleButton
              attributeName: downstreamOption
              displayName: Downstream
              default: false
              isRequired: true

            - type: tabular
              displayName: 'Lag Specification'
              attributeName: lagSpecification
              columns:
          
              -  type: textBox
                 displayName: Time Value
                 attributeName: lagValue
                 default: 60
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Time Period
                 attributeName: lagPeriod
                 default: "Minutes"
                 options:
                 - Seconds
                 - Minutes
                 - Hours
                 - Days
                 isRequired: false
                 enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.downstreamOption %} false {% else %} true {% endif %}"

            - type: dropdownSelector
              displayName: Refresh Mode
              attributeName: refresh_mode
              default: "AUTO"
              options:
              - AUTO
              - INCREMENTAL
              - FULL
              isRequired: true

            - type: dropdownSelector   
              displayName: Initialize
              attributeName: initialize
              default: "ON_CREATE"
              options:
              - ON_CREATE
              - ON_SCHEDULE 
              isRequired: true

          - groupName: Dimension Options
            items:
            - type: tabular
              displayName: 'Table Key(s)'
              attributeName: partitionBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: partColName
                 isRequired: true
                
              isRequired: true

            - displayName: Record Versioning
              attributeName: recordVersioning
              type: dropdownSelector
              default: Datetime Column
              options:
                - Datetime Column
                - Date Column and Time Column
              isRequired: true

            - type: tabular
              displayName: 'Timestamp or Sequence'
              attributeName: orderBy
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: colName
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Datetime Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Datetime Column') %} true {% else %} false {% endif %}"

            - type: tabular
              displayName: 'Date / Timestamp Columns'
              attributeName: orderByDateTime
              columns:
          
              -  type: columnDropdownSelector
                 displayName: Date Column
                 attributeName: colNameDate
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: columnDropdownSelector
                 displayName: Timestamp Column
                 attributeName: colNameTimestamp
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrdDateTimestamp
                 default: desc
                 options:
                 - desc
                 - asc
                 isRequired: true
                 enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
              isRequired: false
              enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"


          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Dynamic Table
              options:
              - Dynamic Table
              isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: '{{ dimensionHistoryPk_adv() }}'
          dataType: STRING
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: RECORD_START_TIME
          transform: '{{ order_by_col_adv() }}'
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: RECORD_END_TIME
          transform: 'LEAD({{ order_by_col_adv()}}) OVER (PARTITION BY {{ partition_by_adv() }} ORDER BY {{ order_by_col_adv() }} asc)'
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: RECORD_CURRENT_FLAG
          transform: 'CASE WHEN (LEAD({{ order_by_col_adv()}}) OVER (PARTITION BY {{ partition_by_adv() }} ORDER BY {{ order_by_col_adv() }} asc)) IS NULL THEN 1 ELSE 0 END'
          dataType: NUMERIC
          placement: end
          attributeName: isRecordCurrent

        - displayName: RECORD_CREATED_DATE
          transform: 'FIRST_VALUE({{ order_by_col_adv()}}) OVER (PARTITION BY {{ partition_by_adv() }} ORDER BY {{ order_by_col_adv() }} asc)'
          dataType: TIMESTAMP
          placement: end
          attributeName: recordCreated
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dynamic Table Dimension  == #}
            {# == Node Type Description    : This node creates and runs dynamic table dimension  == #}


            {% if desiredState == currentState %}

            {{ stage('Nothing to do.') }}
            select 1 = 0
            {% elif desiredState %}
                ## Identify all config changes that would cause a CREATE instead of ALTER
                {% if currentState != undefined %} 
                    ## General metadata
                    {% set columnsTest = currentState.columns == desiredState.columns %}
                    {% set sourcesTest = currentState.sources == desiredState.sources %}

                    ## Storage Location Tests
                    ## Only need to account for updated Storage Location mappings 
                    ## sourceTest handles changed Storage Location Names
                    ## Current Namespace Varialbes
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    ## Current State Storage Location Info
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    ## Desired Namespace Variables
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    ## Desired State Storage Location Info
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    ## Test 
                    {% set nsVariables.storageLocationTest = true %}
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        ## Current mappings
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        ## Desired mappings
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    ## Config
                    {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}
                    {% set partitionByTest = currentState.config.partitionBy == desiredState.config.partitionBy %}
                    {% set orderByTest = currentState.config.orderBy == desiredState.config.orderBy %}
                    {% set orderByDateTimeTest = currentState.config.orderByDateTime == desiredState.config.orderByDateTime %}
                    {% set recordVersioningTest = currentState.config.recordVersioning == desiredState.config.recordVersioning %}

                    ## Node
                    {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
                    {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
                    {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}


                    ## Refresh_mode test
                    {% set refreshTest = currentState.config.refresh_mode == desiredState.config.refresh_mode %}

                    ## Initialize test
                    {% set initializeTest = currentState.config.initialize == desiredState.config.initialize %}

                    ## If any of the above are false then a CREATE must be run
                    {% if 
                        columnsTest == false or
                        sourcesTest == false or
                        nsVariables.storageLocationTest == false or
                        insertStrategyTest == false or 
                        partitionByTest == false or 
                        orderByTest == false or 
                        orderByDateTimeTest == false or 
                        recordVersioningTest == false or 
                        nodeNameTest == false or 
                        nodeMaterializationType == false or 
                        nodeIsMultisource == false or 
                        initializeTest == false or 
                        refreshTest == false %}    

                        {% set createTest = true %}
                    {% else %}
                        {% set createTest = false %}
                    {% endif %}
                {% endif %}
                
                ## Identify config changes that would only result in ALTER
                {% if createTest == false %}
                    {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
                    {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
                    {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% if 
                        warehouseTest == false or
                        lagSpecificationTest == false or
                        downstreamOptionTest == false or
                        nodeCommentTest == false %}    

                        {% set alterOnlyTest = true %}
                    {% else %}
                        {% set alterOnlyTest = false %}
                    {% endif %}
                {% endif %}


                ## CREATE or ALTER
                {% if (currentState == undefined) or (createTest == true) %}

                    ## Dynamic Table Name
                    {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Warehouse
                    ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}

                    ## Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Refresh-type option
                    {% set dynamicTablerefresh = desiredState.config.refresh_mode %}

                    ##Initialize option
                    {% set dynamicTableinitialize = desiredState.config.initialize %}

                    {{ stage('Create Dynamic Dimension Table', true, "sql", "create") }}
                    CREATE OR REPLACE DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                        TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                        WAREHOUSE = {{dynamicTableWarehouse}}
                        REFRESH_MODE   = {{dynamicTablerefresh}}
                        INITIALIZE = {{dynamicTableinitialize}}
                        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    AS
                    {% for source in desiredState.sources %}
                        SELECT 
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}

                        {% if not loop.last %}
                            {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    

                {% elif (currentState != undefined) and (alterOnlyTest == true) %}

                    ## Desired Dynamic Table Name
                    {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                    ## Desired Warehouse
                    {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
                        {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
                    {% else %}
                        {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
                    {% endif %}


                    ## Desired Downstream Option or Lag Specification
                    {% if desiredState.config.downstreamOption == true %}
                        {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## Current Warehouse
                    {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}

                    ## Current Downstream Option or Lag Specification
                    {% if currentState.config.downstreamOption == true %}
                        {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
                    {% else %}
                        {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
                        {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

                        {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
                    {% endif %}

                    ## ALTER for Warehouse if necessary
                    {% set dynamicTableWarehouse = '' %}
                    {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
                        {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
                    {% endif %}

                    ## Alter for Target lag if necessary
                    {% set dynamicTableLagSpecification = '' %}
                    {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
                        {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
                        {% else %}
                            {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
                        {% endif %}
                    {% endif %}

                    {%- if desiredState.node.description | length > 0 %}
                        {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description + "'" %}
                    {% endif %}

                    {{ stage('Alter Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
                        {{ dynamicTableWarehouse }}
                        {{ dynamicTableLagSpecification }}
                        {{ dynamicTableComment }}
                    
                    {{ stage('Refresh Dynamic Table', true, "sql", "create") }}
                    ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} REFRESH

                {% else %}
                    {{ stage('Nothing to do.') }}
                    select 1 = 0
                
                {% endif %}
                    
            {% elif currentState != undefined and desiredState == undefined %}

                ## Dynamic Table Name
                {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table', true, "sql", "drop") }}
                DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Snowflake Dynamic Table
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isHubHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	
            	{% endif %}

            			
            	{{ stage('Merge Link') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isLinkHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Link
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            		{% if config.preSQL %}
            			{{ stage('Pre-SQL') }}
            			{{ config.preSQL }}
            		{% endif %}
            	
            		{{ stage('Merge Satellite') }}
            		MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            		(
            			{% for source in sources %}
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if not loop.last %}
            				{{ config.insertStrategy }}
            			{% endif %}
            		{% endfor %}
            		)
            		AS "SRC"
            		ON
            		{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                        and col.sourceColumns[0].column 
                                                        and col.sourceColumns[0].column.isChangeHash
                                                        ) -%}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            		{% endfor %}
            		WHEN NOT MATCHED THEN
            		INSERT
            		(
            			{% for col in columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		) VALUES
            		(
            			{% for col in columns %}
            				"SRC"."{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		)
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs: {}
version: 2
