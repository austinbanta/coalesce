environments:
  DEV:
    createdAt:
      nanoseconds: 518000000
      seconds: 1639689212
    createdBy: iMeAfovxHz9mJLva2FFB
    description: ""
    devEnv: true
    id: 2
    mappings:
      "1":
        database: COALESCE_SAMPLE_DATABASE
        id: 1
        locationName: DEV
        schema: TPCH_SF001
      "2":
        database: AUSTIN_TEST_DB
        id: 2
        locationName: STG
        schema: DEV_STG
    name: DEV
jobs:
  Job-2:
    id: 2
    name: New Job
    steps:
      - "257"
    subgraphs: []
locations:
  DEV:
    default: false
    id: 1
    locationName: DEV
  STG:
    default: true
    id: 2
    locationName: STG
macros: {}
packages: {}
projects: {}
stepTypes:
  StepType-22:
    id: "22"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub User-Defined
        short: 'H'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - type: multisourceToggle
          
        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}

            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            			{% endif %}
        run:
          templateString: |-
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT DISTINCT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.isHubHash) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            	
            {% endif %}
    name: Hub
    version: 1
  StepType-23:
    id: "23"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Link User-Defined
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Insert Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: false

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                            {{ stage('Create Link Table') }}

                            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                            (
                                {% for col in columns %}
                                    "{{ col.name }}" {{ col.dataType }}
                                    {%- if not col.nullable %} NOT NULL
                                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                            )
                            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

                        {% endif %}
        run:
          templateString: |+
            
            {% if node.materializationType == 'table' %}
                {% if config.preSQL %}
                    {{ stage('Pre-SQL') }}
                    {{ config.preSQL }}
                
                {% endif %}

                        
                {{ stage('Merge Link') }}
                MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
                (
                    {% for source in sources %}
                    SELECT DISTINCT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {{ config.insertStrategy }}
                    {% endif %}
                {% endfor %}
                )
                AS "SRC"
                ON
                {% for col in sources[0].columns if (col.isLinkHash) -%}
                    {% if not loop.first %}
                        AND
                    {% endif %}
                    "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                {% endfor %}
                WHEN NOT MATCHED THEN
                INSERT
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                ) VALUES
                (
                    {% for col in columns %}
                        "SRC"."{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )

                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}    
                {% endif %}
            {% endif %}
                        
    name: Link
    version: 1
  StepType-24:
    id: "24"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite User-Defined
        short: 'S'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

         

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}

            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            			{% endif %}
        run:
          templateString: |-
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

            	{{ stage('Insert New Rows') }}
            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	WITH "SAT_CURR_ROWS" AS (
            		/* get current rows from satellite */
            		{% for col in columns if col.isHubHash or col.isChangeHash %}
            			{%- if loop.first -%}SELECT {% endif %} 
            			{{col.name}}
            			{%- if not loop.last -%}, {% endif %}
            			{%- if loop.last %} 
            				FROM {{ ref_no_link(node.location.name, node.name) }} 
            				QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isHubHash") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
            			{% endif %}
            		{% endfor %}
            	)

            		{% for source in sources %}
            			SELECT DISTINCT
            			{% for col in source.columns %}
            				{{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}

            			{{ source.join }}
            		WHERE NOT EXISTS(
            			SELECT 1 FROM "SAT_CURR_ROWS"
            			WHERE 
            			{% for col in source.columns if col.isHubHash or col.isChangeHash %}
            				{% if not loop.first %}
            					AND
            				{% endif %}
            				{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            			{% endfor %}
            		)

            		{% endfor %}

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            {% endif %}
    name: Satellite
    version: 1
  StepType-25:
    id: "25"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Link Satellite User-Defined
        short: 'LSAT'
        plural: 'Link Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: false

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: false

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                            {{ stage('Create Link Satellite Table') }}

                            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                            (
                                {% for col in columns %}
                                    "{{ col.name }}" {{ col.dataType }}
                                    {%- if not col.nullable %} NOT NULL
                                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                            )
                            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

                        {% endif %}
        run:
          templateString: |+
            
            {% if node.materializationType == 'table' %}
                {% if config.preSQL %}
                    {{ stage('Pre-SQL') }}
                    {{ config.preSQL }}
                {% endif %}

                {{ stage('Insert New Rows') }}
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                WITH "SAT_CURR_ROWS" AS (
                    /* get current rows from satellite */
                    {% for col in columns if col.isLinkHash or col.isChangeHash %}
                        {%- if loop.first -%}SELECT {% endif %} 
                        {{col.name}}
                        {%- if not loop.last -%}, {% endif %}
                        {%- if loop.last %} 
                            FROM {{ ref_no_link(node.location.name, node.name) }} 
                            QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isLinkHash") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
                        {% endif %}
                    {% endfor %}
                )

                    {% for source in sources %}
                        SELECT DISTINCT
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}
                    WHERE NOT EXISTS(
                        SELECT 1 FROM "SAT_CURR_ROWS"
                        WHERE 
                        {% for col in source.columns if col.isLinkHash or col.isChangeHash %}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
                        {% endfor %}
                    )

                    {% endfor %}

                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}
                {% endif %}

            {% endif %}

                        
    name: Link Satellite
    version: 1
  StepType-26:
    id: "26"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Effectivity Satellite User-Defined
        short: 'EFF_SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: false

          - displayName: Driving Key Column
            type: columnSelector
            attributeName: isDrivingKey
            isRequired: false


        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                            {{ stage('Create Effectivity Satellite Table') }}

                            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                            (
                                {% for col in columns %}
                                    "{{ col.name }}" {{ col.dataType }}
                                    {%- if not col.nullable %} NOT NULL
                                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                            )
                            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

                        {% endif %}
        run:
          templateString: |+
            
            {% if node.materializationType == 'table' %}
                {% if config.preSQL %}
                    {{ stage('Pre-SQL') }}
                    {{ config.preSQL }}
                {% endif %}

                {{ stage('Insert New Rows') }}
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                WITH "SAT_CURR_ROWS" AS (
                    /* get current rows from satellite */
                    {% for col in columns if col.isDrivingKey or col.isLinkHash %}
                        {%- if loop.first -%}SELECT {% endif %} 
                        {{col.name}}
                        {%- if not loop.last -%}, {% endif %}
                        {%- if loop.last %} 
                            FROM {{ ref_no_link(node.location.name, node.name) }} 
                            QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isDrivingKey") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
                        {% endif %}
                    {% endfor %}
                )

                    {% for source in sources %}
                        SELECT DISTINCT
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                        {{ source.join }}
                    WHERE NOT EXISTS(
                        SELECT 1 FROM "SAT_CURR_ROWS"
                        WHERE 
                        {% for col in source.columns if col.isDrivingKey or col.isLinkHash %}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
                        {% endfor %}
                    )

                    {% endfor %}

                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}
                {% endif %}

            {% endif %}

                        
    name: Effectivity Satellite
    version: 1
  StepType-27:
    id: "27"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |+
        capitalized: Satellite Milti-Active User-Defined
        short: 'HS_MA'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: false

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: false

          - displayName: Multi-Active Column
            type: columnSelector
            attributeName: isMAAttrib
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                            {{ stage('Create Satellite Table') }}

                            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                            (
                                {% for col in columns %}
                                    "{{ col.name }}" {{ col.dataType }}
                                    {%- if not col.nullable %} NOT NULL
                                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                    {% endif %}
                                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                            )
                            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

                        {% endif %}
        run:
          templateString: |+
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

            	{{ stage('Insert New Rows') }}
            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	WITH "SAT_CURR_ROWS" AS (
            		/* get current rows from satellite */
            		{% for col in columns if col.isHubHash or col.isChangeHash or col.isMAAttrib %}
            			{%- if loop.first -%}SELECT {% endif %} 
            			{{col.name}}
            			{%- if not loop.last -%}, {% endif %}
            			{%- if loop.last %} 
            				FROM {{ ref_no_link(node.location.name, node.name) }} 
            				QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isHubHash") }}","{{ get_value_by_column_attribute("isMAAttrib") }}" ORDER BY LOAD_DATE DESC) = 1
            			{% endif %}
            		{% endfor %}
            	)

            		{% for source in sources %}
            			SELECT DISTINCT
            			{% for col in source.columns %}
            				{{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}

            			{{ source.join }}
            		WHERE NOT EXISTS(
            			SELECT 1 FROM "SAT_CURR_ROWS"
            			WHERE 
            			{% for col in source.columns if col.isHubHash or col.isChangeHash or col.isMAAttrib %}
            				{% if not loop.first %}
            					AND
            				{% endif %}
            				{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            			{% endfor %}
            		)

            		{% endfor %}

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            {% endif %}

                        
    name: Satellite Multi-Active
    version: 1
  StepType-28:
    id: "28"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: BV View
        short: S_CURR
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
        - groupName: Options
          items:
          - displayName: Sat Hash Column(s) (Include Multi-Active)
            type: columnSelector
            attributeName: isSatKey
            isRequired: true

          - displayName: Sat Date Column(s)
            type: columnSelector
            attributeName: isDateColumn
            isRequired: true

          - type: materializationSelector
            options:
              - view
            default: view
            isRequired: true
            enableIf: 'false'
      templates:
        create:
          templateString: |-
            {{ stage('Create View') }}

            {% set order_by = namespace(order_by_txt='') %}
            {% set partition_by = namespace(partition_by_txt='') %}


                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        
                                {%- if col.isDateColumn  %} 
                            {%- if order_by.order_by_text  | length >= 1 %}{% set order_by.order_by_text = order_by.order_by_text + ',' + col.name %}{% endif %} 
                            {%- if order_by.order_by_text  | length == 0 %}{% set order_by.order_by_text = col.name %}{% endif %}
                    {% endif %} 

                    {%- if col.isSatKey  %} 
                            {%- if partition_by.partition_by_text  | length >= 1 %}{% set partition_by.partition_by_text = partition_by.partition_by_text + ',' + col.name %}{% endif %} 
                            {%- if partition_by.partition_by_text  | length == 0 %}{% set partition_by.partition_by_text = col.name %}{% endif %}
                    {% endif %}  


                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                   
                    {{ source.join }}
                    QUALIFY LEAD({{order_by.order_by_text}}) 
                            OVER (PARTITION BY {{partition_by.partition_by_text}} 
                                ORDER BY {{order_by.order_by_text}} ASC) IS NULL

             
                {% endfor %}
        run:
          templateString: ""
    name: Sat Business Vault Current
    version: 1
  StepType-29:
    id: "29"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: BV View
        short: S_PIT
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
        - groupName: Options
          items:
          - displayName: Sat Hash Column(s) (Include Multi-Active)
            type: columnSelector
            attributeName: isSatKey
            isRequired: true

          - displayName: Sat Date Column(s)
            type: columnSelector
            attributeName: isDateColumn
            isRequired: true

          - type: materializationSelector
            options:
              - view
            default: view
            isRequired: true
            enableIf: 'false'
      templates:
        create:
          templateString: |
            {{ stage('Create View') }}

            {% set order_by = namespace(order_by_txt='') %}
            {% set partition_by = namespace(partition_by_txt='') %}


                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        ,
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        
                    {%- if col.isDateColumn  %} 
                            {%- if order_by.order_by_text  | length >= 1 %}{% set order_by.order_by_text = order_by.order_by_text + ',' + col.name %}{% endif %} 
                            {%- if order_by.order_by_text  | length == 0 %}{% set order_by.order_by_text = col.name %}{% endif %}
                    {% endif %} 

                    {%- if col.isSatKey  %} 
                            {%- if partition_by.partition_by_text  | length >= 1 %}{% set partition_by.partition_by_text = partition_by.partition_by_text + ',' + col.name %}{% endif %} 
                            {%- if partition_by.partition_by_text  | length == 0 %}{% set partition_by.partition_by_text = col.name %}{% endif %}
                    {% endif %}  


                    {% endfor %}
                    "SAT_EFFECTIVE_DATE"
                    ,"SAT_EXPIRY_DATE"
                    ,"CURRENT_FLAG"
                    ,"VERSION_NUMBER"
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        ,
                    {% endfor %}

                    {# Sat Effective Date #}
                        "LOAD_DATE" AS "SAT_EFFECTIVE_DATE",
                    
                    {# Sat Expiry Date #}
                        NVL(
                            LEAD({{order_by.order_by_text}}) 
                            OVER (PARTITION BY {{partition_by.partition_by_text}} 
                                ORDER BY {{order_by.order_by_text}} ASC), 
                        '31-Dec-8888') AS "SAT_EXPIRY_DATE"
            ,            
                    {# Current Flag #}
                        CASE WHEN LEAD({{order_by.order_by_text}}) 
                            OVER (PARTITION BY {{partition_by.partition_by_text}} 
                                ORDER BY {{order_by.order_by_text}} ASC) IS NULL
                                THEN 'Y'
                                ELSE 'N'
                                END        
                        AS "CURRENT_FLAG",  

                    {# Version Number #}              
                        ROW_NUMBER () 
                        OVER (PARTITION BY {{partition_by.partition_by_text}} 
                        ORDER BY {{order_by.order_by_text}} ASC) AS "VERSION_NUMBER"


                    {{ source.join }}

             
                {% endfor %}
        run:
          templateString: ""
    name: Sat Business Vault PIT
    version: 1
  StepType-30:
    id: "30"
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: CDC Table
        short: "CDC"
        tagColor: "#ff33cc"
        plural: CDC Tables

        config:
        - groupName: Stream
          items:
          - displayName: Description
            attributename: description
            type: textBox
            isRequired: false
            default: "A CDC table consists of a few components:\n
              1. A stream on the source node\n
              2. The CDC table which contains a persistent replica of recent CDC records\n
              3. A sequence to keep track of streams\n
              4. Optional: a Task to replicate records from the Stream into the CDC table\n
              "

        - groupName: Task
          items:

          - displayName: Create Task
            enableIf: {{config.cdcTableEnabled}}
            attributeName: taskEnabled
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Task Schedule
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskSchedule
            type: dropdownSelector
            default: "Every 30 minutes"
            options:
            - "Every minute"
            - "Every 5 minutes"
            - "Every 30 minutes"
            - "Every hour"
            - "Every day"
            isRequired: false

          - displayName: Warehouse
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskWarehouse
            type: dropdownSelector
            default: "EMEA_TRANSFORM_XS_WH"
            options:
            - "EMEA_TRANSFORM_XS_WH"
            - "EMEA_TRANSFORM_S_WH"
            - "EMEA_TRANSFORM_M_WH"
            - "EMEA_TRANSFORM_L_WH"
            - "COMPUTE_WH"
            isRequired: false

          - displayName: Custom Task Name
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskCustomName
            type: textBox
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false

        systemColumns:
        - displayName: "METADATA$ACTION"
          transform: "METADATA$ACTION"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataAction
          description: Indicates the DML operation (INSERT, DELETE) recorded.
        - displayName: "METADATA$ISUPDATE"
          transform: "METADATA$ISUPDATE"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataIsUpdate
          description: Indicates whether the operation was part of an UPDATE statement.
        - displayName: "METADATA$ROW_ID"
          transform: "METADATA$ROW_ID"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataRowId
          description: Specifies the unique and immutable ID for the row, which can be used to track changes to specific rows over time.
        - displayName: "CDC_ID"
          transform: ""
          dataType: INTEGER
          placement: end
          attributeName: isStreamMetadataCDCId
          description: Medtronic specific CDC identifier based on a sequence.
        - displayName: "CDC_TIMESTAMP"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate
          description: Medtronic specific attribute containing the timestamp of storing the CDC record.
      templates:
        create:
          templateString: |-
            {{ stage('Create Stream') }}

            CREATE OR REPLACE STREAM {{ ref_no_link(node.location.name, "STR_" + node.name) }}
            ON TABLE {{ ref(sources[0].dependencies[0].node.location.name, sources[0].dependencies[0].node.name) }}
            APPEND_ONLY = FALSE
            COMMENT = 'CDC Stream on {{ ref(node.location.name, sources[0].dependencies[0].node.name) }}'

            {{ stage('Create Sequence') }}

            CREATE OR REPLACE SEQUENCE {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}

            {{ stage('Create CDC Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            {% if config.taskEnabled is true %}

                {{ stage('Create Task') }}

                CREATE OR REPLACE TASK 
                {% if config.taskCustomName != '' %}
                    {{ ref_no_link(node.location.name, config.taskCustomName) }}
                {% else %}
                    {{ ref_no_link(node.location.name, "TSK_" + node.name) }}
                {% endif %}
                WAREHOUSE = {{config.taskWarehouse}}
             
                SCHEDULE = 
                {% if config.taskSchedule == 'Every minute' %}
                    '1 MINUTE'
                {% elif config.taskSchedule == 'Every 5 minutes' %}
                    '5 MINUTE'
                {% elif config.taskSchedule == 'Every 30 minutes' %}
                    '30 MINUTE'
                {% elif config.taskSchedule == 'Every hour' %}
                    '60 MINUTE'
                {% elif config.taskSchedule == 'Every day' %}
                    '3600 MINUTE'
                {% else %}
                    'INVALID'
                {% endif %}
                COMMENT='Task to copy data of stream STR_{{node.name}} to CDC Table {{node.name}}'
                WHEN SYSTEM$STREAM_HAS_DATA('{{ ref_no_link(node.location.name, "STR_" + node.name) }}')
                AS
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}

                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {% if col.name == 'CDC_ID' %}
                            SEQ_{{node.name}}.NEXTVAL
                        {% elif col.transform | trim != '' %}
                            {{ col.transform.replace(source.dependencies[0].node.name, 'STR_' + node.name) }}
                        {% elif col.sourceColumns[0].column and col.sourceColumns[0].column.name %}
                            "STR_{{ node.name }}"."{{ col.sourceColumns[0].column.name }}"
                        {% else %}
                            NULL
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    FROM {{ ref_no_link(node.location.name, "STR_" + node.name) }}

                    {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                        {{config.insertStrategy}}
                    {% endif %}

                {% endfor %}

            {% endif %}
        run:
          templateString: |-
            {% if config.taskEnabled is true %}

                {{ stage('Resume Task') }}

                ALTER TASK 
                {% if config.taskCustomName != '' %}
                    {{ ref_no_link(node.location.name, config.taskCustomName) }}
                {% else %}
                    {{ ref_no_link(node.location.name, "TSK_" + node.name) }}
                {% endif %}
                RESUME

            {% else %}

                {{ stage('Insert From Stream') }}

                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}

                {% for source in sources %}
                
                    SELECT
                    {% for col in source.columns %}
                        {% if col.name == 'CDC_ID' %}
                            {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}.NEXTVAL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    FROM {{ ref_no_link(node.location.name, "STR_" + node.name) }} AS "{{ sources[0].dependencies[0].node.name }}"

                    {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                        {{config.insertStrategy}}
                    {% endif %}

                {% endfor %}

            {% endif %}
    name: CDC Table
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |
            
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: "

            \    {% if node.materializationType == 'table' %}

            \        {{ stage('Create Fact Table') }}

            \   \ 

            \        CREATE OR REPLACE TABLE {{
            ref_no_link(node.location.name, node.name) }}

            \        (

            \            {% for col in columns %}

            \                \"{{ col.name }}\" {{ col.dataType }}

            \                {%- if not col.nullable %} NOT NULL

            \                    {%- if col.defaultValue | length >
            0 %} DEFAULT {{ col.defaultValue }}{% endif %}

            \                {% endif %}

            \                {%- if col.description | length > 0 %}
            COMMENT '{{ col.description }}'{% endif %}

            \                {%- if not loop.last -%}, {% endif %}

            \            {% endfor %}

            \        )

            \        {%- if node.description | length > 0 %} COMMENT
            = '{{ node.description }}'{% endif %}

            \   \ 

            \   \ 

            \    {% elif node.materializationType == 'view' %}

            \        {{ stage('Create Fact View') }}

            \   \ 

            \        CREATE OR REPLACE VIEW {{
            ref_no_link(node.location.name, node.name) }}

            \        (

            \            {% for col in columns %}

            \                \"{{ col.name }}\"

            \                {%- if col.description | length > 0 %}
            COMMENT '{{ col.description }}'{% endif %}

            \                {%- if not loop.last -%},{% endif %}

            \            {% endfor %}

            \        )

            \        {%- if node.description | length > 0 %} COMMENT
            = '{{ node.description }}'{% endif %}

            \        AS

            \        {% for source in sources %}

            \   \ 

            \            {% if loop.first %}SELECT {% endif %}

            \   \ 

            \            {% for col in source.columns %}

            \                {{ get_source_transform(col) }} AS \"{{
            col.name }}\"

            \                {%- if not loop.last -%}, {% endif %}

            \            {% endfor %}

            \            {{ source.join }}

            \   \ 

            \            {% if not loop.last %} UNION ALL {% endif
            %}

            \        {% endfor %}

            \   \ 

            \    {% endif %}

            \    "
        run:
          templateString: "

            \    {% for test in node.tests if config.testsEnabled %}

            \        {% if test.runOrder == 'Before' %}

            \            {{ test_stage(test.name,
            test.continueOnFailure) }}

            \            {{ test.templateString }}

            \        {% endif %}

            \    {% endfor %}


            \    {% if node.materializationType == 'table' %}

            \        {% if config.preSQL %}

            \            {{ stage('Pre-SQL') }}

            \            {{ config.preSQL }}

            \        {% endif %}

            \       \ 

            \        {% set has_business_key = columns |
            selectattr(\"isBusinessKey\") | list | length > 0 %}

            \       \ 

            \        {% for source in sources %}

            \       \ 

            \            {% if has_business_key %}

            \       \ 

            \                {{ stage('MERGE ' + source.name |
            string ) }}

            \                MERGE INTO {{
            ref_no_link(node.location.name, node.name) }} \"TGT\"

            \                USING (

            \                    SELECT

            \                    {% for col in source.columns %}

            \                        {{ get_source_transform(col) }}
            AS \"{{ col.name }}\"

            \                        {%- if not loop.last %}, {%
            endif %}

            \                    {% endfor %}

            \                    {{ source.join }})

            \                    AS \"SRC\"

            \                ON

            \                {% for col in source.columns if
            col.isBusinessKey -%}

            \                    {% if not loop.first %}

            \                        AND

            \                    {% endif %}

            \                    \"SRC\".\"{{ col.name }}\" =
            \"TGT\".\"{{ col.name }}\"

            \                {% endfor %}

            \                WHEN MATCHED

            \                {% for col in source.columns if not
            (   col.isBusinessKey or

            \                                                        \
            col.isSystemUpdateDate or

            \                                                        \
            col.isSystemCreateDate) %}

            \                    {% if loop.first %}

            \                        AND (

            \                    {% else %}

            \                        OR

            \                    {% endif %}

            \                    NVL( CAST(\"SRC\".\"{{ col.name
            }}\" as STRING), '**NULL**') <> NVL( CAST(\"TGT\".\"{{ col.name }}\"
            as STRING), '**NULL**')

            \                    {% if loop.last %}

            \                        )

            \                    {% endif %}

            \                {% endfor %}

            \                THEN UPDATE SET

            \                {%- for col in source.columns if not
            (col.isBusinessKey or col.isSystemCreateDate) %}

            \                        \"TGT\".\"{{ col.name }}\" =
            \"SRC\".\"{{ col.name }}\"

            \                    {% if not loop.last %}, {% endif %}

            \                {% endfor %}

            \                WHEN NOT MATCHED THEN

            \                INSERT (

            \                {%- for col in source.columns if not
            col.isSurrogateKey %}

            \                    \"{{ col.name }}\"

            \                    {% if not loop.last %}, {% endif %}

            \                {% endfor -%}

            \                )

            \                VALUES (

            \                {%- for col in source.columns if not
            col.isSurrogateKey %}

            \                    \"SRC\".\"{{ col.name }}\"

            \                    {% if not loop.last %}, {% endif %}

            \                {% endfor -%}

            \                )

            \       \ 

            \            {% else %}

            \       \ 

            \                {{ stage('Insert ' + source.name |
            string ) }}

            \       \ 

            \                    INSERT INTO {{
            ref_no_link(node.location.name, node.name) }}

            \                    (

            \                        {% for col in source.columns %}

            \                            \"{{ col.name }}\"

            \                            {%- if not loop.last -%},{%
            endif %}

            \                        {% endfor %}

            \                    )

            \       \ 

            \                    SELECT

            \                    {% for col in source.columns %}

            \                        {{ get_source_transform(col) }}
            AS \"{{ col.name }}\"

            \                        {%- if not loop.last -%}, {%
            endif %}

            \                    {% endfor %}

            \                    {{ source.join }}

            \            {% endif %}

            \        {% endfor %}

            \        {% if config.postSQL %}

            \            {{ stage('Post-SQL') }}

            \            {{ config.postSQL }}

            \        {% endif %}

            \    {% endif %}


            \    {% if config.testsEnabled %}

            \        {% for test in node.tests %}

            \            {% if test.runOrder == 'After' %}

            \                {{ test_stage(test.name,
            test.continueOnFailure) }}

            \                {{ test.templateString }}

            \            {% endif %}

            \        {% endfor %}


            \        {% for column in columns %}

            \            {% for test in column.tests %}

            \                {{ test_stage(column.name + \": \" +
            test.name) }}

            \                {{ test.templateString }}

            \            {% endfor %}

            \        {% endfor %}

            \    {% endif %}

            \   \ 

            \    "
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: "

            \    {% for test in node.tests if config.testsEnabled %}

            \        {% if test.runOrder == 'Before' %}

            \            {{ test_stage(test.name,
            test.continueOnFailure) }}

            \            {{ test.templateString }}

            \        {% endif %}

            \    {% endfor %}


            {% if node.materializationType == 'table' %}

            \t{% if config.preSQL %}

            \t\t{{ stage('Pre-SQL') }}

            \t\t{{ config.preSQL }}

            \t{% endif %}



            \t{{ stage('Merge Hub') }}

            \tMERGE INTO {{ ref_no_link(node.location.name,
            node.name) }} \"TGT\" USING

            \t(

            \t\t{% for source in sources %}

            \t\tSELECT

            \t\t{% for col in source.columns %}

            \            {{ get_source_transform(col) }} AS \"{{
            col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}


            \t\t{{ source.join }}


            \t\t{% if not loop.last %}

            \t\t\t{{ config.insertStrategy }}

            \t\t{% endif %}

            \t{% endfor %}

            \t)

            \tAS \"SRC\"

            \tON

            \t{% for col in sources[0].columns if
            (col.sourceColumns[0]\ 

            \                                        and
            col.sourceColumns[0].column\ 

            \                                        and
            col.sourceColumns[0].column.isHubHash

            \                                        ) -%}

            \t\t{% if not loop.first %}

            \t\t\tAND

            \t\t{% endif %}

            \t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name
            }}\"

            \t{% endfor %}

            \tWHEN NOT MATCHED THEN

            \tINSERT

            \t(

            \t\t{% for col in columns %}

            \t\t\t\"{{ col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}

            \t) VALUES

            \t(

            \t\t{% for col in columns %}

            \t\t\t\"SRC\".\"{{ col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}

            \t)



            \t{% if config.postSQL %}

            \t\t{{ stage('Post-SQL') }}

            \t\t{{ config.postSQL }}

            \t{% endif %}

            \t

            {% endif %}


            {% if config.testsEnabled %}

            \t{% for test in node.tests %}

            \t\t{% if test.runOrder == 'After' %}

            \t\t\t{{ test_stage(test.name, test.continueOnFailure)
            }}

            \t\t\t{{ test.templateString }}

            \        {% endif %}

            \t{% endfor %}


            \t{% for column in columns %}

            \t\t{% for test in column.tests %}

            \t\t\t{{ test_stage(column.name + \": \" + test.name) }}

            \t\t\t{{ test.templateString }}

            \t\t{% endfor %}

            \t{% endfor %}

            {% endif %}

            \t\t\t"
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: "

            \    {% for test in node.tests if config.testsEnabled %}

            \        {% if test.runOrder == 'Before' %}

            \            {{ test_stage(test.name,
            test.continueOnFailure) }}

            \            {{ test.templateString }}

            \        {% endif %}

            \    {% endfor %}


            {% if node.materializationType == 'table' %}

            \t{% if config.preSQL %}

            \t\t{{ stage('Pre-SQL') }}

            \t\t{{ config.preSQL }}

            \t

            \t{% endif %}


            \t\t\t

            \t{{ stage('Merge Link') }}

            \tMERGE INTO {{ ref_no_link(node.location.name,
            node.name) }} \"TGT\" USING

            \t(

            \t\t{% for source in sources %}

            \t\tSELECT

            \t\t{% for col in source.columns %}

            \            {{ get_source_transform(col) }} AS \"{{
            col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}


            \t\t{{ source.join }}


            \t\t{% if not loop.last %}

            \t\t\t{{ config.insertStrategy }}

            \t\t{% endif %}

            \t{% endfor %}

            \t)

            \tAS \"SRC\"

            \tON

            \t{% for col in sources[0].columns if
            (col.sourceColumns[0]\ 

            \                                        and
            col.sourceColumns[0].column\ 

            \                                        and
            col.sourceColumns[0].column.isLinkHash

            \                                        ) -%}

            \t\t{% if not loop.first %}

            \t\t\tAND

            \t\t{% endif %}

            \t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name
            }}\"

            \t{% endfor %}

            \tWHEN NOT MATCHED THEN

            \tINSERT

            \t(

            \t\t{% for col in columns %}

            \t\t\t\"{{ col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}

            \t) VALUES

            \t(

            \t\t{% for col in columns %}

            \t\t\t\"SRC\".\"{{ col.name }}\"

            \t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t{% endfor %}

            \t)


            \t{% if config.postSQL %}

            \t\t{{ stage('Post-SQL') }}

            \t\t{{ config.postSQL }}\t

            \t{% endif %}

            {% endif %}


            {% if config.testsEnabled %}

            \t{% for test in node.tests %}

            \t\t{% if test.runOrder == 'After' %}

            \t\t\t{{ test_stage(test.name, test.continueOnFailure)
            }}

            \t\t\t{{ test.templateString }}

            \        {% endif %}

            \t{% endfor %}


            \t{% for column in columns %}

            \t\t{% for test in column.tests %}

            \t\t\t{{ test_stage(column.name + \": \" + test.name) }}

            \t\t\t{{ test.templateString }}

            \t\t{% endfor %}

            \t{% endfor %}

            {% endif %}

            \t\t\t"
    name: Link
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: "

            \    {% for test in node.tests if config.testsEnabled %}

            \        {% if test.runOrder == 'Before' %}

            \            {{ test_stage(test.name,
            test.continueOnFailure) }}

            \            {{ test.templateString }}

            \        {% endif %}

            \    {% endfor %}


            {% if node.materializationType == 'table' %}

            \t\t{% if config.preSQL %}

            \t\t\t{{ stage('Pre-SQL') }}

            \t\t\t{{ config.preSQL }}

            \t\t{% endif %}

            \t

            \t\t{{ stage('Merge Satellite') }}

            \t\tMERGE INTO {{ ref_no_link(node.location.name,
            node.name) }} \"TGT\" USING

            \t\t(

            \t\t\t{% for source in sources %}

            \t\t\tSELECT

            \t\t\t{% for col in source.columns %}

            \                {{ get_source_transform(col) }} AS \"{{
            col.name }}\"

            \t\t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t\t{% endfor %}

            \t

            \t\t\t{{ source.join }}

            \t

            \t\t\t{% if not loop.last %}

            \t\t\t\t{{ config.insertStrategy }}

            \t\t\t{% endif %}

            \t\t{% endfor %}

            \t\t)

            \t\tAS \"SRC\"

            \t\tON

            \t\t{% for col in sources[0].columns if
            (col.sourceColumns[0]\ 

            \                                            and
            col.sourceColumns[0].column\ 

            \                                            and
            col.sourceColumns[0].column.isChangeHash

            \                                            ) -%}

            \t\t\t{% if not loop.first %}

            \t\t\t\tAND

            \t\t\t{% endif %}

            \t\t\t\"SRC\".\"{{ col.name }}\" = \"TGT\".\"{{ col.name
            }}\"

            \t\t{% endfor %}

            \t\tWHEN NOT MATCHED THEN

            \t\tINSERT

            \t\t(

            \t\t\t{% for col in columns %}

            \t\t\t\t\"{{ col.name }}\"

            \t\t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t\t{% endfor %}

            \t\t) VALUES

            \t\t(

            \t\t\t{% for col in columns %}

            \t\t\t\t\"SRC\".\"{{ col.name }}\"

            \t\t\t\t{%- if not loop.last -%}, {% endif %}

            \t\t\t{% endfor %}

            \t\t)

            \t

            \t{% if config.postSQL %}

            \t\t{{ stage('Post-SQL') }}

            \t\t{{ config.postSQL }}\t

            \t{% endif %}

            \t

            {% endif %}


            {% if config.testsEnabled %}

            \t{% for test in node.tests %}

            \t\t{% if test.runOrder == 'After' %}

            \t\t\t{{ test_stage(test.name, test.continueOnFailure)
            }}

            \t\t\t{{ test.templateString }}

            \        {% endif %}

            \t{% endfor %}


            \t{% for column in columns %}

            \t\t{% for test in column.tests %}

            \t\t\t{{ test_stage(column.name + \": \" + test.name) }}

            \t\t\t{{ test.templateString }}

            \t\t{% endfor %}

            \t{% endfor %}

            {% endif %}

            \t\t\t"
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2
            
                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-
            
            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-1:
    id: 1
    name: New Subgraph
    steps:
      - "186"
